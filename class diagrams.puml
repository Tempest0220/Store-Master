@startuml CoreFramework
skinparam dpi 300
interface Discount {
  +getPrice(price): double
  +getName(): String
}
class RateDiscount{
  -rate: double
  +getPrice(price)
  +getName()
}
RateDiscount -|> Discount

interface ProductComponent {
  +getName(): String
  +getPrice(): double
  +getQuantity(): int
  +setQuantity(qty)
  +add(child)
  +remove(child)
  +getChildren(): List
}

abstract class ProductItem implements ProductComponent {
  -name: String
  -price: double
  -quantity: int
  -discount: Discount
}

class ExpiringProductItem extends ProductItem {
  -expiryDate: LocalDate
}

class ProductCategory implements ProductComponent {
  -children: List<ProductComponent>
}

ProductCategory "1" *-- "0..*" ProductComponent
ProductItem --> Discount

class InventoryManager {
  -products: Map<String,ProductComponent>
  +addProduct(p)
  +getProduct(name)
  +restock(name,qty)
}
InventoryManager --> ProductCategory
InventoryManager -> ProductComponent

interface SalesRule {
  +applySale(items: Map<ProductComponent,Integer>, cust)
  +applySale(product, qty, cust)
}
class SimpleSalesRule
class MembershipSalesRule {
  -discountRate: double
}
SalesRule <|.. SimpleSalesRule
SalesRule <|.. MembershipSalesRule

abstract class Store {
  -productCategories: List
  -productRegistry: InventoryManager
  -rule: SalesRule
  +sell(name,qty,customer)
  +stockShelf(name,qty)
  #initStore()
}
Store --> InventoryManager: 管理庫存
Store --> SalesRule: 查詢售價

@enduml

@startuml GUIFactory
skinparam dpi 300
class StoreGUI {
  -store: Store
  -factory: StorePanelFactory
  -menuBar: JMenuBar
}

interface StorePanelFactory {
  +createSalesPanel(store,members): JPanel
  +createReceivingPanel(store): JPanel
  +createManagementPanel(store,members): JPanel
}

class DefaultStorePanelFactory
class RestaurantPanelFactory

StorePanelFactory <|.. DefaultStorePanelFactory
StorePanelFactory <|.. RestaurantPanelFactory
StoreGUI o-- StorePanelFactory
StoreGUI --> "1" Store

@enduml


@startuml RestaurantState
skinparam dpi 300
class TableContext {
  -state: TableState
  -member: Customer
  +reserve()
  +seat(mem)
  +cancel()
  +order(map)
  +checkout(): double
}

interface TableState {
  +name(): String
  +reserve(ctx)
  +seat(ctx)
  +cancel(ctx)
  +order(ctx,map)
  +checkout(ctx): double
}

class EmptyState
class ReservedState
class OccupiedState

TableState <|.. EmptyState
TableState <|.. ReservedState
TableState <|.. OccupiedState
TableContext *-- TableState : current
TableContext --> RestaurantStore

' ===== 套餐計價 =====
interface SalesRule
class RestaurantSalesRule extends SalesRule {
  -store: RestaurantStore
  +applySale(items,member)
}
abstract Store {
    #salesRule: SalesRule
}
abstract NormalSalesGUIStore extends Store
class RestaurantStore extends NormalSalesGUIStore {
  -productCategoryMap: Map

  +settleOrder(order,member,checkout)
  +getCategoryOf(name)
}
Store --> SalesRule
RestaurantSalesRule ..> RestaurantStore

@enduml


@startuml ConcreteStores
skinparam dpi 300

abstract class Store {
  -productCategories: List
  -productRegistry: InventoryManager
  +sell(name,qty,customer)
  +stockShelf(name,qty)
  #initStore()
}

Store -> InventoryManager

abstract class NormalSalesGUIStore extends Store
class StationeryStore
class VegetableStore
class RestaurantStore

NormalSalesGUIStore <|-- StationeryStore
NormalSalesGUIStore <|-- VegetableStore
NormalSalesGUIStore <|-- RestaurantStore

StationeryStore ..> MembershipSalesRule
VegetableStore ..> SimpleSalesRule
RestaurantStore ..> RestaurantSalesRule

@enduml
